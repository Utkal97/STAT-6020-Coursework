install.packages("nycflights13")
library(nycflights13)
knitr::opts_chunk$set(echo = TRUE, class.source="bg-success")
# Display flights dataset
flights
filter(flights, arr_delay>= 2)
filter(flights, arr_delay>= 2)
filter(flights, arr_delay >= 2)
knitr::opts_chunk$set(echo = TRUE, class.source="bg-success")
library(tidyverse)
#Load any additional packages
library(nycflights13)
# Display flights dataset
flights
filter(flights, arr_delay >= 2)
filter(flights, dest == "IAH" | dest == "HOU")
filter(flights, carrier=="AA")
filter(flights, carrier == "UA" | carrier == "AA" | carrier == "DA")
filter(flights, carrier == "DA")
filter(flights, carrier == "UA" | carrier == "AA" | carrier == "DL")
filter(flights, month %in% c(7,8,9))
filter(flights, arr_delay > 2, dep_delay <= 0)
filter(flights, arr_delay > 2, dep_delay == 0)
filter(flights, arr_delay > 120, dep_delay <= 0)
filter(flights, arr_delay >= 120)
filter(flights, dep_delay >= 60, arr_delay <= dep_delay - 30)
filter(flights, dep_delay >= 60, arr_delay < dep_delay - 30)
arrange(flights, arr_delay)
arrange(flights, desc(arr_delay))
arrange(flights, desc(dep_delay))
arrange(flights, (distance / air_time))
arrange(flights, desc(distance / air_time))
mutate(flights_with_new_columns,
converted_dep_time = ((dep_time %/% 100) + (dep_time %% 100)),
converted_sched_dep_time = ((sched_dep_time %/% 100) + (sched_dep_time %% 100)))
flights_with_new_columns <- flights
mutate(flights_with_new_columns,
converted_dep_time = ((dep_time %/% 100) + (dep_time %% 100)),
converted_sched_dep_time = ((sched_dep_time %/% 100) + (sched_dep_time %% 100)))
mutate(flights_with_new_columns,
converted_dep_time = (((dep_time %/% 100)*60) + (dep_time %% 100)),
converted_sched_dep_time = (((sched_dep_time %/% 100)*60) + (sched_dep_time %% 100)))
final_data <- flights |>
filter(origin == "JFK", month == 1) |>  # Filter flights from JFK in January
select(flight, carrier, dep_delay) |>  # Select three columns
mutate(delay_category = ifelse(dep_delay > 15, "Delayed", "On Time")) |>  # Create a new variable
arrange(desc(dep_delay))
flights |>
filter(origin == "JFK", month == 1) |>  # Filter flights from JFK in January
select(flight, carrier, dep_delay) |>  # Select three columns
mutate(delay_category = ifelse(dep_delay > 15, "Delayed", "On Time")) |>  # Create a new variable
arrange(desc(dep_delay))
flights |>
filter(origin == "JFK", month == 1) |>  # Filter flights from JFK in January
select(flight, tailnum, carrier, dep_delay) |>  # Select three columns
mutate(delay_category = ifelse(dep_delay > 15, "Delayed", "On Time")) |>  # Create a new variable
arrange(desc(dep_delay))
flights |>
filter(origin == "JFK", month == 1) |>  # Filter flights from JFK in January
select(flight, tailnum, origin, dest, carrier, dep_delay) |>  # Select three columns
mutate(delay_category = ifelse(dep_delay > 15, "Delayed", "On Time")) |>  # Create a new variable
arrange(desc(dep_delay))
flights |>
filter(origin == "JFK", month == 1) |>
select(flight, tailnum, origin, dest, carrier, dep_delay) |>
mutate(delay_category = ifelse(dep_delay > 15, "Delayed more than 15 mins", "On Time")) |>
arrange(desc(dep_delay))
flights |>
filter(origin == "JFK", month == 1) |>
select(flight, tailnum, origin, dest, air_time, carrier, dep_delay) |>
mutate(delay_category = ifelse(dep_delay > 15, "Delayed more than 15 mins", "On Time")) |>
arrange(desc(air_time))
flights |>
filter(origin == "JFK", month == 1) |>
select(flight, tailnum, origin, dest, air_time, carrier, dep_delay) |>
mutate(delay_category = ifelse(dep_delay > 15, "Delayed more than 15 mins", "On Time")) |>
arrange((air_time))
# pipe is used to filter out all flights departing from JFK on January 1st of each year, selecting some columns and add a column that checks if the flight is delayed for more than 15 minutes, sorted in ascending order of air time
flights |>
filter(origin == "JFK", month == 1, day == 1) |>
select(flight, tailnum, origin, dest, air_time, carrier, dep_delay) |>
mutate(delay_category = ifelse(dep_delay > 15, "Delayed more than 15 mins", "On Time")) |>
arrange(air_time)
